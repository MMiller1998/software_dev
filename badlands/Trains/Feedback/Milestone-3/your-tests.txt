(testing /vagrant/canonical/3/xmap)
(testing /home/vagrant/repos/badlands/3/Tests-0/1-in.json /home/vagrant/repos/badlands/3/Tests-0/1-out.json)
construct-game-map: contract violation
  expected: connection-good?
  given: '#s(connection |Washington, D.C.| |St. Louis| red 4)
  in: an and/c case of
      an element of
      an and/c case of
      the connections argument of
      (->i
       ((w width?)
        (h height?)
        (cities-and-places
         (listof
          (list/c
           symbol?
           (list/c natural? natural?))))
        (connections
         (cities-and-places)
         (and/c
          connection*/c
          (in-cities? cities-and-places))))
       (#:map (map any/c))
       (r game-map?))
  contract from: <pkgs>/Ticket/Common/map.rkt
  blaming: <pkgs>/Ticket/Common/map-serialize.rkt
   (assuming the contract is correct)
  at: <pkgs>/Ticket/Common/map.rkt:57:3
  context...:
   /usr/share/racket/collects/racket/contract/private/blame.rkt:346:0: raise-blame-error
   /usr/share/racket/collects/racket/contract/private/list.rkt:215:14
   .../private/arr-i.rkt:976:19: ...icket/Common/map.rkt:58:3
   /usr/share/racket/collects/racket/contract/private/arrow-higher-order.rkt:375:33: body of top-level
   /usr/share/racket/collects/racket/private/list.rkt:320:16: composed
   /vagrant/deps/21SwDev/Code/get.rkt:18:0: get
   /vagrant/canonical/3/xmap:28:0: main
---------------------------------
(*** score 0)
(*** on)
'("Washington, D.C."
  "St. Louis"
  #hasheq((cities . (("Washington, D.C." (100 100)) ("St. Louis" (150 600))))
          (connections
           .
           #hasheq((|Washington, D.C.|
                    .
                    #hasheq((|St. Louis| . #hasheq((red . 4)))))))
          (height . 800)
          (width . 200)))
(*** expected)
'(#t)
(*** but received)
'(((plain fast with-newline plain-unicode) ()))


()
((passed 0) (total 1) (partial-score 0))
(testing /vagrant/canonical/3/xmap)
(testing /home/vagrant/repos/badlands/3/Tests-1/2-in.json /home/vagrant/repos/badlands/3/Tests-1/2-out.json)
construct-game-map: contract violation
  expected: connection-good?
  given: '#s(connection |Oklahoma City| Jackson white 5)
  in: an and/c case of
      an element of
      an and/c case of
      the connections argument of
      (->i
       ((w width?)
        (h height?)
        (cities-and-places
         (listof
          (list/c
           symbol?
           (list/c natural? natural?))))
        (connections
         (cities-and-places)
         (and/c
          connection*/c
          (in-cities? cities-and-places))))
       (#:map (map any/c))
       (r game-map?))
  contract from: <pkgs>/Ticket/Common/map.rkt
  blaming: <pkgs>/Ticket/Common/map-serialize.rkt
   (assuming the contract is correct)
  at: <pkgs>/Ticket/Common/map.rkt:57:3
  context...:
   /usr/share/racket/collects/racket/contract/private/blame.rkt:346:0: raise-blame-error
   /usr/share/racket/collects/racket/contract/private/list.rkt:215:14
   .../private/arr-i.rkt:976:19: ...icket/Common/map.rkt:58:3
   /usr/share/racket/collects/racket/contract/private/arrow-higher-order.rkt:375:33: body of top-level
   /usr/share/racket/collects/racket/private/list.rkt:320:16: composed
   /vagrant/deps/21SwDev/Code/get.rkt:18:0: get
   /vagrant/canonical/3/xmap:28:0: main
---------------------------------
(*** score 0)
(*** on)
'("Seattle"
  "Boston"
  #hasheq((cities
           .
           (("Seattle" (50 50))
            ("Helena" (100 100))
            ("Cheyenne" (150 150))
            ("Lincoln" (200 200))
            ("Kansas City" (300 300))
            ("Oklahoma City" (300 400))
            ("Jackson" (475 500))
            ("Nashville" (550 400))
            ("Washington, D.C." (700 300))
            ("Princeton" (725 250))
            ("Boston" (750 200))))
          (connections
           .
           #hasheq((Cheyenne . #hasheq((Lincoln . #hasheq((red . 5)))))
                   (Helena . #hasheq((Cheyenne . #hasheq((red . 5)))))
                   (Jackson . #hasheq((Nashville . #hasheq((green . 5)))))
                   (|Kansas City|
                    .
                    #hasheq((|Oklahoma City| . #hasheq((white . 5)))))
                   (Lincoln . #hasheq((|Kansas City| . #hasheq((white . 5)))))
                   (Nashville
                    .
                    #hasheq((|Washington, D.C.| . #hasheq((green . 5)))))
                   (|Oklahoma City|
                    .
                    #hasheq((Jackson . #hasheq((white . 5)))))
                   (Princeton . #hasheq((Boston . #hasheq((blue . 5)))))
                   (Seattle . #hasheq((Helena . #hasheq((red . 5)))))
                   (|Washington, D.C.|
                    .
                    #hasheq((Princeton . #hasheq((blue . 5)))))))
          (height . 800)
          (width . 800)))
(*** expected)
'(#f)
(*** but received)
'(((plain fast with-newline plain-unicode) ()))


()
((passed 0) (total 1) (partial-score 0))
(testing /vagrant/canonical/3/xmap)
(testing /home/vagrant/repos/badlands/3/Tests-2/3-in.json /home/vagrant/repos/badlands/3/Tests-2/3-out.json)
construct-game-map: contract violation
  expected: connection-good?
  given: '#s(connection |Oklahoma City| Jackson white 5)
  in: an and/c case of
      an element of
      an and/c case of
      the connections argument of
      (->i
       ((w width?)
        (h height?)
        (cities-and-places
         (listof
          (list/c
           symbol?
           (list/c natural? natural?))))
        (connections
         (cities-and-places)
         (and/c
          connection*/c
          (in-cities? cities-and-places))))
       (#:map (map any/c))
       (r game-map?))
  contract from: <pkgs>/Ticket/Common/map.rkt
  blaming: <pkgs>/Ticket/Common/map-serialize.rkt
   (assuming the contract is correct)
  at: <pkgs>/Ticket/Common/map.rkt:57:3
  context...:
   /usr/share/racket/collects/racket/contract/private/blame.rkt:346:0: raise-blame-error
   /usr/share/racket/collects/racket/contract/private/list.rkt:215:14
   .../private/arr-i.rkt:976:19: ...icket/Common/map.rkt:58:3
   /usr/share/racket/collects/racket/contract/private/arrow-higher-order.rkt:375:33: body of top-level
   /usr/share/racket/collects/racket/private/list.rkt:320:16: composed
   /vagrant/deps/21SwDev/Code/get.rkt:18:0: get
   /vagrant/canonical/3/xmap:28:0: main
---------------------------------
(*** score 0)
(*** on)
'("Seattle"
  "Boston"
  #hasheq((cities
           .
           (("Seattle" (50 50))
            ("Helena" (100 100))
            ("aneleH" (100 150))
            ("Cheyenne" (150 150))
            ("enneyehC" (150 200))
            ("Lincoln" (200 200))
            ("nlocniL" (200 250))
            ("Kansas City" (300 300))
            ("Oklahoma City" (300 400))
            ("Jackson" (475 500))
            ("Nashville" (550 400))
            ("Washington, D.C." (700 300))
            ("Princeton" (725 250))
            ("Boston" (750 200))))
          (connections
           .
           #hasheq((Cheyenne . #hasheq((Lincoln . #hasheq((red . 5)))))
                   (Helena . #hasheq((Cheyenne . #hasheq((red . 5)))))
                   (Jackson . #hasheq((Nashville . #hasheq((green . 5)))))
                   (|Kansas City|
                    .
                    #hasheq((|Oklahoma City| . #hasheq((white . 5)))))
                   (Lincoln . #hasheq((|Kansas City| . #hasheq((white . 5)))))
                   (Nashville
                    .
                    #hasheq((|Washington, D.C.| . #hasheq((green . 5)))))
                   (|Oklahoma City|
                    .
                    #hasheq((Jackson . #hasheq((white . 5)))))
                   (Princeton . #hasheq((Boston . #hasheq((blue . 5)))))
                   (Seattle . #hasheq((Helena . #hasheq((red . 5)))))
                   (|Washington, D.C.|
                    .
                    #hasheq((Princeton . #hasheq((blue . 5)))))
                   (aneleH . #hasheq((enneyehC . #hasheq((blue . 3)))))
                   (enneyehC . #hasheq((nlocniL . #hasheq((blue . 3)))))
                   (nlocniL . #hasheq((|Kansas City| . #hasheq((blue . 3)))))))
          (height . 800)
          (width . 800)))
(*** expected)
'(#t)
(*** but received)
'(((plain fast with-newline plain-unicode) ()))


()
((passed 0) (total 1) (partial-score 0))
